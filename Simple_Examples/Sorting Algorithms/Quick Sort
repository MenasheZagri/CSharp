    class Program
    {
        static void Main(string[] args)
        {
            //initialize new array
            int[] array = new int[] {7, 13, 43, 8, 16, 2, 5};

            Console.WriteLine("Original Array:");
            foreach (var item in array)
            {
                Console.Write(" " + item);
            }
            Console.WriteLine();

            QuickSort(array,0,array.Length-1);
            Console.WriteLine();
            Console.WriteLine("Sorted array");
            foreach (var item in array)
            {
                Console.Write(" " + item);
            }
            Console.WriteLine();
        }

        //Create a quick sort algorithm function that takes array, the first element (left), length -1(right)
        static void QuickSort(int[] array, int left, int right)
        {
            //check if first element is smaller than last element
            if (left < right)  
            {
                //insert the output from the sorting into the pivot
                //meaning any new number will be bigger than the previous number
                //and it will be on the right side
                int pivot = Partition(array, left, right);

                //Sort the array to the left if pivot larger than 1
                if (pivot > 1)
                {
                    QuickSort(array,left,pivot-1);
                }

                //Sort the array to the right if pivot+1 is smaller than right
                if (pivot + 1 < right)
                {
                    QuickSort(array,pivot +1 ,right);
                }
            }
        }

        //Declare function that split the array to check blocks
        static int Partition(int[] array, int left, int right)
        {
            //declare pivot and insert the left element
            int pivot = array[left];
            while (true)
            {
                //Push the smaller number right
                while (array[left] < pivot)
                {
                    left++;
                }

                //Push the larger number left
                while (array[right] > pivot)
                {
                    right--;
                }

                //Swap the elements if the left is smaller than right
                if (left < right)
                {
                    //check if the left number equals right, then return right
                    if (array[left] == array[right]) 
                        return right;
                    //Swap the numbers
                    int temp = array[left];
                    array[left] = array[right];
                    array[right] = temp;
                }
                else
                {
                    return right;
                }
            }
        }
    }
