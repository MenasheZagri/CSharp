    class Program
    {
        static void Main(string[] args)
        {
            Task task1 = Task.Run(() =>
            {
                Console.WriteLine("Hello from task1");
            });
            task1.Wait();

            //creation option - Task Factory does exactly what Task.Run but it can add additional parameters
            //such as non-ThreadPool tasks: TaskCreationOptions.LongRunning 
            Task<int> task2 = Task<int>.Factory.StartNew(() =>
                {
                    Delay("task2");
                    //notice that a daemon thread does not crash the main even if exception is made (such as divide by 0)
                    int a = 0;
                    int b = 1 / a;
                    Console.WriteLine("Hello from task2");
                    return b;
                },
                //additional parameters
                TaskCreationOptions.LongRunning);
                
                //if you want to wait for Task2 to complete, create a while loop but remember to use context switch
                while (!task2.IsCompleted)
                {
                    Thread.Sleep(10);
                }
                
                //a mechanism to handle task exception and bring it to the main program without crashing it
                if (task2.IsFaulted)
                {
                    task2.Exception.Handle(exception =>
                    {
                        Console.WriteLine(exception);
                        return true;
                    });
                }
        }
        static void Delay(string taskName)
        {
            Console.WriteLine($"({taskName} is doing a Thread Sleep)");
            for (int i = 0; i <= 100; i++)
            {
                Console.Write("Counting: ");
                Console.ForegroundColor = ConsoleColor.Red;
                Console.Write(string.Format("{0}", i));
                Console.ResetColor();
                Console.Write("\r".PadLeft(Console.WindowWidth - Console.CursorLeft - 1));
                Thread.Sleep(10);
            }
            Console.WriteLine("");
        }
    }
