using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp57
{
    class Point
    {
        public Point(int x, int y)
        {
            this.x = x;
            this.y = y;
        }
        public int x { get; set; }
        public int y { get; set; }

        public static bool operator ==(Point p1 , Point p2)
        {
            
            if (ReferenceEquals(p1, null) && ReferenceEquals( p2,null))
            {
                return true;
            }

            if (ReferenceEquals(p1, null) || ReferenceEquals(p2, null))
            {
                return false;
            }

            if (p1.x == p2.x && p1.y == p2.y)
            {
                return true;
            }
            return false;
        }

        public static bool operator !=(Point p1, Point p2)
        {
            return ! (p1 == p2);
        }

        public static bool operator >= (Point p1, Point p2)
        {
            return !(p1 == p2);
        }
        public static bool operator <=(Point p1, Point p2)
        {
            return !(p1 == p2);
        }

        public static bool operator >(Point p1, Point p2)
        {
            return !(p1 == p2);
        }

        public static bool operator <(Point p1, Point p2)
        {
            return !(p1 == p2);
        }

        public static Point operator +(Point p1, Point p2)
        {
            return new Point(p1.x + p2.x, p1.y + p2.y);
        }


        //the below was autogenerated by ReSharper
        //can this work instead of casting "as"?
        /* 
        public override bool Equals(object obj)
        {
            return obj is Point point &&
                   x == point.x &&
                   y == point.y;
        }
        */
        public override bool Equals(object obj)
        {
            Point other = obj as Point;
            return this == other;
        }

        public override string ToString()
        {
            return $"x {x} y {y}";
        }
    }
}
